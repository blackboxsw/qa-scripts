#!/bin/bash

set -f
CONTAINER_NAME=""
VERBOSITY=0
TEMP_D=""

error() { echo "$@" 1>&2; }
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }

Usage() {
    cat <<EOF
Usage: ${0##*/} [ options ] release name

   create a container 'name' with proposed and provided packages.

   options:
      -i | --install PKGLIST    install these packages.
                                either ',' or space delimited
      -u | --upgrade PKGLIST    update the packages in PKGLIST using
                                    apt-get install --upgrade-only
                                special 'all'  means all. (dist-upgrade)
      -A | --add-archive A      add the apt archive via 'apt-add-repository'
                                the string 'RELEASE' will be replaced
                                with the output of 'lsb_release -sc'
      -p | --publish            publish the result as an image named 'name'
      -P | --proposed           enable proposed

    Packages in --upgrade and --install can be either ',' or ' ' delimited.
    The options can be given more than once.

    If no upgrade or install is provided, then 'cloud-init' then
    --upgrade=cloud-init is assumed.  Use explicit 'none' to avoid any
    upgrade or install.
EOF
}

bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || error "$@"; return 1; }
cleanup() {
    [ -z "${TEMP_D}" -o ! -d "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
    if [ -n "$CONTAINER_NAME" ]; then
        lxc delete --force "$CONTAINER_NAME"
        CONTAINER_NAME=""
    fi
}

debug() {
    local level=${1}; shift;
    [ "${level}" -gt "${VERBOSITY}" ] && return
    error "${@}"
}

find_command() {
    local cmd="$1" mydir="${0%/*}" fpath=""
    command -v "$cmd" >/dev/null 2>&1 && _RET="$(command -v $cmd)" && return 0
    [ -x "$mydir/$cmd" ] && _RET="$mydir/$cmd" && return 0
    fpath=$(readlink -f "$0")
    mydir="${fpath%/*}"
    [ -x "$mydir/$cmd" ] && _RET="$mydir/$cmd" && return 0
    return 1
}


main() {
    local short_opts="aA:hiPpu:v"
    local long_opts="add-archive:,help,install:,proposed,proxy:,publish,upgrade:,verbose"
    local getopt_out=""
    getopt_out=$(getopt --name "${0##*/}" \
        --options "${short_opts}" --long "${long_opts}" -- "$@") &&
        eval set -- "${getopt_out}" ||
        { bad_Usage; return; }

    local cur="" next="" publish="false" vflag="" pt="" proxy="${http_proxy}"
    pt=( )  # pass through

    while [ $# -ne 0 ]; do
        cur="$1"; next="$2";
        case "$cur" in
            # any key=value passthrough
            -A|--add-archive|-u|--upgrade|-i|--install|--proxy)
                pt=( "${pt[@]}" "$cur" "$next" ); shift;;
            # any flag pass through.
            -P|--proposed) pt[${#pt[@]}]="$cur";;
            -p|--publish) publish=true;;
            -h|--help) Usage ; exit 0;;
            -v|--verbose) VERBOSITY=$((${VERBOSITY}+1))
                vflag="${vflag:--}v";;
            --) shift; break;;
        esac
        shift;
    done

    [ $# -eq 0 ] && { bad_Usage "must provide release and name."; return 1; }
    [ $# -eq 2 ] || { bad_Usage "Expected 2 args, got $# ($*)"; return; }
    local release="$1" cname="$2" pubname="" clean=""
    local src="ubuntu-daily:$release" update_root=""
    clean="$cname"

    local lxc_ver="" cmd=""
    lxc_ver=$(lxc --version) || { error "lxc --version failed"; return 1; }
    debug 1 "lxc client version = $lxc_ver"

    case "$lxc_ver" in
        1.*|2.0.*) error "Unsupported lxc version $lxc_ver"; return 1;;
        2.1.*|3.*) :;;
        *) error "Unknown lxc version $lxc_ver"; return 1;;
    esac

    find_command lxc-pstart ||
        { error "Unable to find command 'lxc-pstart'."; return 1; }
    cmd="$_RET"

    find_command update-root ||
        { error "Unable to find command 'update-root'."; return 1; }
    update_root="$_RET"

    if [ "$publish" = "true" ]; then
        pubname="$cname"
        cname="${cname}-${RANDOM}${RANDOM}"
        clean="$cname"
    fi
    trap cleanup EXIT
    debug 1 "initializing container $cname"
    lxc init "$src" "$cname" || {
        error "failed to create $cname from $src"
        return 1
    }
    CONTAINER_NAME="$clean"

    "$cmd" "$cname" -- /bin/bash -s update-root $vflag "${pt[@]}" \
        < "$update_root" || return

    if [ "$publish" = "true" ]; then
        debug 1 "publishing $cname to alias $pubname"
        lxc publish "$cname" "--alias=$pubname"
    else
        CONTAINER_NAME=""
    fi

    return 0
}

if [ "$1" = "chrooted" ]; then
    shift
    chrooted "$@"
else
    main "$@"
fi

# vi: ts=4 expandtab
