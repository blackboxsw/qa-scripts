#!/bin/sh
# This is 'psuedo-init' that is used by lxc-pstart.
set -f
VERBOSITY=1
LOG="/tmp/${0##*/}.log"
BK_SUF=".psi-bk"
PATH=/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

error() { echo "$@" 1>&2; }
errorrc() { local r=$?; echo "$@" 1>&2; return $r; }
fail() { local r=$?;  [ $r -eq 0 ] && r=1; failrc "$r" "$@"; }
failrc() { local r=$1; shift; [ $# -eq 0 ] || error "$@"; exit $r; }

Usage() {
    cat <<EOF
Usage: psuedo-init [options] name

   psuedo-init a false init that provides a pid 1 that will
   allow 'lxc exec' without side affects of a normal /sbin/init

   options:
      -h | --help        this message

EOF
}

bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || error "$@"; return 1; }

debug() {
    local level=${1}; shift;
    [ "${level}" -gt "${VERBOSITY}" ] && return
    echo "$@" >> "$LOG"
    error "$@"
}

cleanup() {
    local f p="" um=""
    ip link set $IFACE down
    for f in $RESTORES; do
        [ -e "$f${BK_SUF}" -o -L "$f${BK_SUF}" ] || continue
        mv "$f${BK_SUF}" "$f"
    done
    [ ! -f "$FIFO" ] || rm -f "$FIFO"
    [ ! -f "$0" ] || rm -f "$0"
    for um in $UMOUNTS; do
        umount $um
    done
}

link_up_and_dad() {
    local dev=$1 delay=${2:-0.1} attempts=${3:-60}
    ip link set up dev "$dev" ||
        { error "$dev: failed to set link up"; return 1; }
    local n=0
    while :; do
        n=$((n+1))
        # note: busybox ip does not understand 'tentative' as input
        # so we cannot just use the tentative flag and check for empty
        out=$(ip -6 -o address show dev "$dev" scope link) || {
            error "$dev: checking for link-local addresses failed";
            return 1
        }
        case " $out " in
            *\ dadfailed\ *)
                error "$dev: ipv6 dad failed."
                return 1;;
            *\ tentative\ *) :;;
            *) return 0;;
        esac
        [ $n -lt $attempts ] || {
            error "$dev: time out waiting for permanent link-local address"
            return 1;
        }
        sleep $delay
    done
    return 0
}


configure_net() {
    local iface="$IFACE" netinfo="$1"
    [ -n "$netinfo" ] || return 0
    local gateway="" addr="" nameserver="" size=24
    gateway="${netinfo%/*}"
    nameserver=${gateway}
    local network=${gateway%.*}  # first 3 tokens
    if [ -e /sys/class/net/$iface/address ]; then
        # pick address based on mac address.. why not.
        local mac="" last=""
        read mac </sys/class/net/$iface/address
        last=${mac##*:}
        addr=$((0x$last))
        if [ "$network.$addr" = "$gateway" -o "$addr" = "0" ]; then
            addr=$(((addr+1)%256))
        fi
        addr="$network.$addr"
        debug 1 "using $addr from $last"
    else
        addr="$network.2"
    fi
    if [ "$netinfo" != "$gateway" ]; then
       size="${netinfo#*/}"
    fi
    backup /etc/resolv.conf

    debug 1 ip addr add "$addr/$size" dev "$iface"
    ip addr add "${addr}/$size" dev "$iface" ||
        fail "Failed: ip link set $iface"
    debug 1 ip link set $iface up
    ip link set $iface up
    #link_up_and_dad "$iface" || fail "Failed: ip link set $iface up"
    debug 1 "ip route add default via \"$gateway\""
    ip route add default via "$gateway"

    debug 1 "add nameserver $nameserver to /etc/resolv.conf"
    {
        echo "nameserver $nameserver"
        echo "search lxd"
    } > /etc/resolv.conf
}

block_forever() {
    # do nothing in a manner that allows signals to get through.
    local fifo="$1" vname=""
    mkfifo "$FIFO"
    exec 3<>"$FIFO"
    rm -f "$FIFO"
    read vname <&3
}

backup() {
   local f=""
   for f in "$@"; do
      [ -e "$f" -o -L "$f" ] || continue
      mv "$f" "$f${BK_SUF}"
      RESTORES="${RESTORES} $f"
   done
}

wait_for_ready() {
    local i=0
    while [ $i -lt 1000 ]; do
        [ -e /tmp/ready ] && exit 0
        sleep .1
    done
    exit 1
}

main() {
    local short_opts="h:v"
    local long_opts="help,network:,verbose"
    local getopt_out="" args="$*" argn="$#"
    getopt_out=$(getopt --name "${0##*/}" \
        --options "${short_opts}" --long "${long_opts}" -- "$@") &&
        eval set -- "${getopt_out}" ||
        { bad_Usage; return; }

    local cur="" next="" network=""
    while [ $# -ne 0 ]; do
        cur="$1"; next="$2";
        case "$cur" in
            -h|--help) Usage ; exit 0;;
            -p|--network) network="$next";;
            -v|--verbose) VERBOSITY=$((${VERBOSITY}+1));;
            --) shift; break;;
        esac
        shift;
    done

    FIFO="/tmp/.init-fifo" IFACE="eth0" RESTORES="" UMOUNTS=""
    trap "exit 0" QUIT PWR;
    trap cleanup EXIT

    debug 1 "$0 up got $argn args: $args"
    mount -t tmpfs /tmp /tmp || fail "Failed to mount tmpfs onto /tmp"
    UMOUNTS="/tmp $UMOUNTS"
    debug 1 "mounted /tmp"

    if [ $VERBOSITY -gt 1 ]; then
        set 1>&2
    fi

    configure_net "$network"

    touch /tmp/ready

    block_forever "$FIFO"
}

if [ "$1" = "wait" ]; then
    wait_for_ready
else
    main "$@"
fi
# vi: ts=4 expandtab
